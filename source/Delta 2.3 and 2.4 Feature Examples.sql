-- Databricks notebook source
-- MAGIC %md
-- MAGIC
-- MAGIC ## Examples showing new features of Delta 2.4, 2.3
-- MAGIC
-- MAGIC https://github.com/delta-io/delta/releases/
-- MAGIC
-- MAGIC Most features require 12.2 LTS +

-- COMMAND ----------

CREATE DATABASE IF NOT EXISTS main.new_delta;
USE main.new_delta;

-- COMMAND ----------

-- MAGIC %md
-- MAGIC
-- MAGIC ### Feature Highlight: More Robust SQL Syntax
-- MAGIC https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-create-table-using.html

-- COMMAND ----------

-- DBTITLE 1,New Create table features!

-- DEFAULT VALUES
-- IDENTITY KEYS
-- AUTO INSERT defaults (including null defaults)

CREATE OR REPLACE TABLE new_sql_synax (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  name STRING DEFAULT 'noname',
  description STRING,
  insert_timestamp TIMESTAMP DEFAULT current_timestamp()
)
USING DELTA
TBLPROPERTIES('delta.feature.allowColumnDefaults' = 'supported');

-- COMMAND ----------

-- DBTITLE 1,New Simplier, More Roburst SQL Statements!
--Now we dont have to specify all columns during insert and can rely on default alues!

INSERT INTO new_sql_synax (name, description) VALUES ('cody', 'Solutions Architect');
INSERT INTO new_sql_synax (description) VALUES ('Solutions Architect');
INSERT INTO new_sql_synax (name) VALUES ('cody');

SELECT * FROM new_sql_synax

-- COMMAND ----------

-- MAGIC %md
-- MAGIC
-- MAGIC ### Feature Highlight: Deletion Vectors:
-- MAGIC
-- MAGIC https://docs.databricks.com/delta/deletion-vectors.html

-- COMMAND ----------

-- DBTITLE 1,Proper full data warehousing table with DV - 12.2 LTS + 
CREATE TABLE dv_delta_table
USING DELTA
TBLPROPERTIES('delta.enableDeletionVectors' = true)
AS 
(SELECT * FROM cody_business_unit_dev.iot_system.silver_allsensors_simple
);

-- COMMAND ----------

DESCRIBE DETAIL dv_delta_table

-- COMMAND ----------

DELETE FROM dv_delta_table WHERE Id = 'cf5f0d63-1801-4266-b7ad-911aeec02447';

-- COMMAND ----------

CREATE TABLE dv_delta_table_old
USING DELTA
AS 
(SELECT * FROM cody_business_unit_dev.iot_system.silver_allsensors_simple
);

-- COMMAND ----------

DELETE FROM dv_delta_table_old WHERE Id = 'cf5f0d63-1801-4266-b7ad-911aeec02447';

-- COMMAND ----------

DESCRIBE HISTORY dv_delta_table

-- COMMAND ----------

DESCRIBE HISTORY dv_delta_table_old

-- COMMAND ----------

-- MAGIC %md
-- MAGIC
-- MAGIC ### Feature Highlight: SQL REPLACE WHERE
-- MAGIC
-- MAGIC https://docs.databricks.com/delta/selective-overwrite.html

-- COMMAND ----------

SELECT * FROM cody_business_unit_dev.iot_system.silver_allsensors_simple

-- COMMAND ----------

CREATE OR REPLACE TABLE sql_atomic_replace
PARTITIONED BY (SensorLocation, SensorMeasurement)
AS 
(SELECT * FROM cody_business_unit_dev.iot_system.silver_allsensors_simple
);


INSERT INTO TABLE sql_atomic_replace REPLACE WHERE SensorMeasurement = 'h2o_pH' AND SensorLocation = 'coyote_creek' 
(SELECT * FROM cody_business_unit_dev.iot_system.silver_allsensors_simple
WHERE SensorMeasurement = 'h2o_pH' AND SensorLocation = 'coyote_creek')

-- COMMAND ----------

DESCRIBE HISTORY sql_atomic_replace

-- COMMAND ----------

-- MAGIC %md 
-- MAGIC
-- MAGIC ## Feature Highlight: Shallow Clone + CREATE TABLE LIKE / COPY LOCATION
-- MAGIC
-- MAGIC DBR 13.0 +
-- MAGIC
-- MAGIC https://docs.databricks.com/delta/clone.html
-- MAGIC
-- MAGIC https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-create-table-like.html

-- COMMAND ----------

-- DBTITLE 1,Nuances of Clones
-- Instead of create a table like the above, we can create clones!

-- Notes on table clones: 

/*

SHALLOW CLONE - Copy METADATA ONLY - underlying source files stay where they are and reference old tables

DEEP CLONE -- Copy DATA + METADATA - underlying source files are moved and treated as a whole new independent table
-- Deep clone keeps streaming metadata so you can stop and start streams seamlessly

*/


-- What happens when I update data in a table that has been SHALLOW CLONED?
CREATE OR REPLACE TABLE hive_metastore.codydemos.iot_og_table 
PARTITIONED BY (SensorLocation, SensorMeasurement)
AS 
(SELECT * FROM cody_business_unit_dev.iot_system.silver_allsensors_simple
);

-- SHALLOW
CREATE OR REPLACE TABLE hive_metastore.codydemos.iot_shallow_clone SHALLOW CLONE hive_metastore.codydemos.iot_og_table ;



CREATE OR REPLACE TABLE iot_deep_clone CLONE hive_metastore.codydemos.iot_og_table ;



-- COMMAND ----------

-- MAGIC %md
-- MAGIC
-- MAGIC ### Shallow clone bahvior if I updated SOURCE DATA

-- COMMAND ----------

-- MAGIC %sql
-- MAGIC
-- MAGIC SELECT COUNT(0) FROM hive_metastore.codydemos.iot_shallow_clone

-- COMMAND ----------

DESCRIBE HISTORY hive_metastore.codydemos.iot_shallow_clone

-- COMMAND ----------

-- DBTITLE 1,Change Source Data from OG table
DELETE FROM hive_metastore.codydemos.iot_og_table WHERE Id = 'cf5f0d63-1801-4266-b7ad-911aeec02447';

-- COMMAND ----------

-- DBTITLE 1,Doesnt change - static snapshot - need to re-clone if you want to continue updating source table
SELECT COUNT(0) FROM hive_metastore.codydemos.iot_shallow_clone

-- COMMAND ----------

-- MAGIC %md
-- MAGIC
-- MAGIC ## Feature Highlight - fast listing from S3: delta.enableFastS3AListFrom

-- COMMAND ----------


-- Key Note: Only works when using s3a
SET spark.hadoop.delta.enableFastS3AListFrom=true;
